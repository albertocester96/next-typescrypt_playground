// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  email               String?     @unique
  emailVerified       DateTime?
  hashedPassword      String?
  imageUrl            String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  createdMatches      Match[]     @relation("CreatedMatches")
  participatedMatches UserMatch[]
  sessions            Session[]
  preferredTimes      String[]
  preferredFields     String[]
  preferredDays       String[]
  userGroups          UserGroup[]
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificaionToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userGroups UserGroup[]
  matches    Match[]
}

model UserGroup {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @db.ObjectId

  @@unique([userId, groupId])
}

model Match {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  date            DateTime
  time            String
  numberOfPlayers Int         @default(10)
  field           String
  creatorId       String      @db.ObjectId
  creator         User        @relation("CreatedMatches", fields: [creatorId], references: [id])
  participants    UserMatch[]
  group           Group?      @relation(fields: [groupId], references: [id])
  groupId         String?     @db.ObjectId
}

model UserMatch {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  match   Match  @relation(fields: [matchId], references: [id])
  matchId String @db.ObjectId

  @@unique([userId, matchId])
}
